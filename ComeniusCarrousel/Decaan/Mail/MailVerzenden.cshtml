@* 
    Permissies: Admin, Decaan
    Te bereiken van: _Layout
    Linkt door naar: Decaan/Mail/MailOverzicht, Decaan/Mail/MailBevestiging
    Beschrijving: Weergeeft de te verzenden e-mail, de verzender heeft op deze pagina de optie om de onvangers te selecteren op relevante eigenschappen, op deze manier kan bijvoorbeeld een herinnerings mail verzend worden naar iedereen die zich nog niet aangemeld heeft.
*@

@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "E-Mail verzenden";

    if (!User.IsInRole("Admin") && !User.IsInRole("Decaan"))
    {
        Response.Redirect("~/");
    }

    int mailId = -1;
    var onderwerp = "";
    var inhoud = "";
    List<int> userIds = new List<int>{};
    List<Tuple<int, string>> mailUsers = new List<Tuple<int, string>>{};
    List<string> ontvangers = new List<string>{};
    List<KlasRepo.Klas> klassen = KlasRepo.GetKlassen();
    List<GebruikerRepo.Gebruiker> gebruikers = GebruikerRepo.GetGebruikers();

    if(!Request.QueryString["MailId"].IsEmpty() && Request.QueryString["MailId"].IsInt())
    {
        mailId = Convert.ToInt16(Request.QueryString["MailId"]);
        
        MailRepo.Mail mailDetails = MailRepo.GetMail(mailId);
        if (mailDetails != null)
        {
            userIds = MailOntvangerRepo.GetMailOntvangerIds(mailId);
            mailUsers = MailOntvangerRepo.GetMailUsers(userIds);
            
            onderwerp = mailDetails.Onderwerp;
            inhoud = mailDetails.Inhoud;

            ontvangers = MailOntvangerRepo.GetMailOntvangerStrings(mailId);
        }
        else
        {
            Validation.AddFormError("Er was geen mail concept geselecteerd");
        }
    }
    else
    {
        Validation.AddFormError("Er was geen mail concept geselecteerd");
    }

    if(IsPost && Request.Form["sendMail"] != null)
    {
        Validation.RequireField("onderwerp", "De mail moet een onderwerp gegeven worden");
        Validation.RequireField("inhoud", "Inhoud is vereist");
        Validation.RequireField("mailId", "Er is geen mailId doorgestuurd");

        onderwerp = Request.Form["onderwerp"];
        inhoud = Request.Form["inhoud"];

        if (Validation.IsValid())
        {
            MailRepo.UpdateMail(mailId, onderwerp, inhoud);

            foreach(Tuple<int, string> mailUser in mailUsers)
            {
                string nieuweInhoud = inhoud;

                if (Roles.IsUserInRole(mailUser.Item2, "Leerling"))
                {
                    LeerlingRepo.Leerling leerling = LeerlingRepo.GetLeerling(mailUser.Item1);

                    string keuzevakken = "";
                    foreach(Tuple<string, int> keuzevak in leerling.KeuzeVakken())
                    {
                        if (keuzevakken != "")
                        {
                            keuzevakken += ", " + keuzevak.Item1;
                        }
                        else
                        {
                            keuzevakken += keuzevak.Item1;
                        }
                    }

                    string rooster = "";
                    List<VoorlichtingRepo.Voorlichting> voorlichtingen = VoorlichtingRepo.GetStudentRooster(mailUser.Item1);
                    foreach(VoorlichtingRepo.Voorlichting voorlichting in voorlichtingen)
                    {
                        rooster += voorlichting.Vak + " (" + voorlichting.Niveau + ") van " + voorlichting.Leraar + " op datum: " + string.Format("{0:d/M/yyyy}", voorlichting.DateTime) + " om tijdstip: " + string.Format("{0:HH:mm}", voorlichting.DateTime) + " in lokaal " + voorlichting.Lokaal + "." + System.Environment.NewLine;
                    }

                    nieuweInhoud.Replace("[voornaam]", leerling.Voornaam);
                    nieuweInhoud.Replace("[achternaam]", leerling.Achternaam);
                    nieuweInhoud.Replace("[klas]", leerling.Klas);
                    nieuweInhoud.Replace("[leerlingnummer]", Convert.ToString(leerling.Leerlingnummer));
                    nieuweInhoud.Replace("[niveau]", leerling.Niveau);
                    nieuweInhoud.Replace("[talentstroomvak]", leerling.TalentstroomVak);
                    nieuweInhoud.Replace("[keuzevakken]", keuzevakken);
                    nieuweInhoud.Replace("[rooster]", rooster);
                }

                if (Roles.IsUserInRole(mailUser.Item2, "Leraar"))
                {
                    LeraarRepo.Leraar leraar = LeraarRepo.GetLeraar(mailUser.Item1);

                    string rooster = "";
                    List<VoorlichtingRepo.Voorlichting> voorlichtingen = VoorlichtingRepo.GetLeraarRooster(mailUser.Item1);
                    foreach(VoorlichtingRepo.Voorlichting voorlichting in voorlichtingen)
                    {
                        rooster += voorlichting.Vak + " (" + voorlichting.Niveau + ") op datum: " + string.Format("{0:d/M/yyyy}", voorlichting.DateTime) + " om tijdstip: " + string.Format("{0:HH:mm}", voorlichting.DateTime) + " in lokaal " + voorlichting.Lokaal + "." + System.Environment.NewLine;
                    }

                    nieuweInhoud.Replace("[voornaam]", leraar.Voornaam);
                    nieuweInhoud.Replace("[achternaam]", leraar.Achternaam);
                    nieuweInhoud.Replace("[vak]", leraar.VoorlichtingVak);
                    nieuweInhoud.Replace("[rooster]", rooster);
                }

                WebMail.Send(to: mailUser.Item2,
                subject: onderwerp,
                body: nieuweInhoud);
            }
            Response.Redirect("~/Decaan/Mail/MailOverzicht");
        }
    }

    if(IsPost && Request.Form["wijzigMail"] != null)
    {
        Validation.RequireField("onderwerp", "De mail moet een onderwerp gegeven worden");
        Validation.RequireField("inhoud", "Inhoud is vereist");
        Validation.RequireField("mailId", "Er is geen mailId doorgestuurd");

        onderwerp = Request.Form["Onderwerp"];
        inhoud = Request.Form["Inhoud"];

        if(Validation.IsValid())
        {
            MailRepo.UpdateMail(mailId, onderwerp, inhoud);
        }
    }

    if(IsPost && Request.Form["deleteMail"] != null)
    {
        MailRepo.DeleteMail(mailId);
        Response.Redirect("~/Decaan/Mail/MailOverzicht.cshtml");
    }
}
@Html.ValidationSummary()
<p><b>Ontvangers:</b></p>
@foreach (string ontvanger in ontvangers)
{
    <p>@ontvanger</p>
}
<br>

<form method="post">
    <p>
        <label for="onderwerp">Onderwerp:</label>
        <input type="text" name="onderwerp" value="@onderwerp"></input>
    </p>
    <p>
        <label for="inhoud">Inhoud:</label>
        <textarea style="width: 100%; resize: none; margin-bottom: 16px;" name="inhoud" class="form-control col-md-12" rows="10" maxlength="4000">@inhoud</textarea>
    </p>

    <a href="~/Decaan/Mail/OntvangersToevoegen?MailId=@mailId" class="btn btn-default" role="button">
        <span class="glyphicon glyphicon-plus"></span>&nbsp; Voeg ontvangers toe
    </a>

    <button type="submit" id="submit" name="sendMail" class="btn btn-success" style="float: right;">
        <span class="glyphicon glyphicon-envelope"></span>&nbsp; Verzend
    </button>
    <button type="submit" id="submit" name="wijzigMail" class="btn btn-default" style="float: right;">
        <span class="glyphicon glyphicon-pencil"></span>&nbsp; Wijzig
    </button>
    <button type="submit" id="submit" name="deleteMail" class="btn btn-danger" style="float: right;">
        <span class="glyphicon glyphicon-remove"></span>&nbsp; Verwijder
    </button>
</form>