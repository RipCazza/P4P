@functions{
    // class representatie van de database tabel Vak
    public class Vak
    {
        private const string table = "Vak";
        private const string idName = "VakId";

        private int vakId;
        private string vakNaam;
        private string niveau;

        public Vak(int vakId, string vakNaam, string niveau)
        {
            this.vakId = vakId;
            this.vakNaam = vakNaam;
            this.niveau = niveau;
        }

        public int VakId
        {
            get{return vakId;}
        }
        public string VakNaam
        {
            get{return vakNaam;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "VakNaam", value, idName, vakId);
            }
        }
        public string Niveau
        {
            get{return niveau;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Niveau", value, idName, vakId);
            }
        }
    }

    // geeft alle vakken uit de database terug op het (optionele argument) talentstroomVak na (wordt het optionele argument niveau ingevuld dan worden alleen de vakken waar deze matcht met de gegeven waarde gegeven)
    public static List<Vak> GetVakken(string niveau = "Default", string talentstroomVak = "")
    {
        List<Vak> vakken = new List<Vak>();
        var db = Database.Open(App.DataBase);
        var data = db.Query((niveau == "Default" ? "SELECT * FROM Vak" : "SELECT * FROM Vak WHERE LOWER(Niveau) = LOWER(@0)"), niveau);
        foreach(var row in data)
        {
            if (row.VakNaam == talentstroomVak)
            {}
            else
            {
                vakken.Add(new Vak(row.VakId, row.VakNaam, row.Niveau));
            }
        }
        db.Close();
        return vakken;
    }

    // geeft alle distincte vaknamen terug
    public static List<string> GetDistinctVakken()
    {
        List<string> vakken = new List<string>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT Distinct VakNaam FROM Vak");
        foreach(var row in data)
        {
            vakken.Add(row.VakNaam);
        }
        db.Close();
        return vakken;
    }

    // geeft een vak terug die de gegeven id matcht
    public static Vak GetVak(int id)
    {
        var db = Database.Open(App.DataBase);
        var data = db.QuerySingle("SELECT * FROM Vak WHERE VakId = @0", id);
        if(data != null)
        {
            Vak vak = new Vak(id, data.VakNaam, data.Niveau);
            db.Close();
            return vak;
        }
        db.Close();
        return null;
    }

    // voegt een vak toe aan de database met vakNaam en niveau
    public static void MakeVak(string vakNaam, string niveau)
    {
        var db = Database.Open(App.DataBase);
        var insertCommand = "INSERT INTO Vak (VakNaam, Niveau) VALUES(@0,@1)";
        db.Execute(insertCommand, vakNaam, niveau);
        db.Close();
    }

    // delete een vak en alle children (keuze, voorlichting) uit de database die de gegeven id matcht
    public static void DeleteVak(int id)
    {
        var db = Database.Open(App.DataBase);
        var deleteCommand = "DELETE FROM Vak WHERE VakId = @0";
        var deleteKeuzeCommand = "DELETE FROM Keuze WHERE VakId = @0";
        var voorlichtingData = db.Query("SELECT VoorlichtingId FROM Voorlichting Where VakId = @0", id);
        db.Execute(deleteCommand, id);
        db.Execute(deleteKeuzeCommand, id);
        foreach (var row in voorlichtingData)
        {
            VoorlichtingRepo.DeleteVoorlichting(row.VoorlichtingId);
        }
        db.Close();
    }

    // geeft een true of false statement terug wanneer een vak met de gegeven vakNaam en niveau in de database staat of niet
    public static bool ValidateVak(string vakNaam, string niveau)
    {
        var db = Database.Open(App.DataBase);
        var vakCheck = db.QuerySingle("SELECT VakNaam FROM Vak WHERE LOWER(VakNaam) = LOWER(@0) AND LOWER(Niveau) = LOWER(@1)", vakNaam, niveau);
        db.Close();
        if (vakCheck == null){return false;}
        else{return true;}
    }
}
