@functions{
    // class representatie van de database tabel Voorlichting
    public class Voorlichting
    {
        private const string table = "Voorlichting";
        private const string idName = "VoorlichtingId";

        private int voorlichtingId;
        private int vakId;
        private int userId;
        private int lokaalId;
        private DateTime dateTime;
        private string niveau;

        public Voorlichting(int voorlichtingId, int vakId, int userId, int lokaalId, DateTime dateTime, string niveau)
        {
            this.voorlichtingId = voorlichtingId;
            this.vakId = vakId;
            this.userId = userId;
            this.lokaalId = lokaalId;
            this.dateTime = dateTime;
            this.niveau = niveau;
        }

        public int VoorlichtingId
        {
            get{return voorlichtingId;}
        }
        public int VakId
        {
            get{return vakId;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "VakId", Convert.ToString(value), idName, voorlichtingId);
            }
        }

        // geeft de vakNaam bijbehorend aan de vakId van de voorlichting
        public string Vak
        {
            get
            {
                var db = Database.Open(App.DataBase);
                var data = db.QuerySingle("SELECT VakNaam FROM Voorlichting INNER JOIN Vak ON Vak.VakId = Voorlichting.VakId WHERE VoorlichtingId = @0", voorlichtingId);
                if(data != null)
                {
                    db.Close();
                    return data.VakNaam;
                }
                db.Close();
                return null;
            }
        }
        public int UserId
        {
            get{return userId;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "UserId", Convert.ToString(value), idName, voorlichtingId);
            }
        }

        // geeft de volledige naam bijbehorend aan de userId(leraar) van de voorlichting
        public string Leraar
        {
            get
            {
                var db = Database.Open(App.DataBase);
                var data = db.QuerySingle("SELECT Voornaam, Achternaam FROM Voorlichting INNER JOIN Gebruiker ON Gebruiker.UserId = Voorlichting.UserId WHERE VoorlichtingId = @0", voorlichtingId);
                if(data != null)
                {
                    db.Close();
                    return data.Voornaam + " " + data.Achternaam;
                }
                db.Close();
                return null;
            }
        }
        public int LokaalId
        {
            get{return lokaalId;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "LokaalId", Convert.ToString(value), idName, voorlichtingId);
            }
        }

        // geeft de lokaalNaam bijbehorend aan de lokaalId van de voorlichting
        public string Lokaal
        {
            get
            {
                var db = Database.Open(App.DataBase);
                var data = db.QuerySingle("SELECT LokaalNaam FROM Voorlichting INNER JOIN Lokaal ON Lokaal.LokaalId = Voorlichting.LokaalId WHERE VoorlichtingId = @0", voorlichtingId);
                if(data != null)
                {
                    db.Close();
                    return data.LokaalNaam;
                }
                db.Close();
                return null;
            }
        }
        public DateTime DateTime
        {
            get{return dateTime;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "DateTime", Convert.ToString(value), idName, voorlichtingId);
            }
        }
        public string Niveau
        {
            get{return niveau;}
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Niveau", value, idName, voorlichtingId);
            }
        }
    }

    // geeft alle voorlichtingen uit de database terug
    public static List<Voorlichting> GetVoorlichtingen()
    {
        List<Voorlichting> voorlichtingen = new List<Voorlichting>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Voorlichting ORDER BY DateTime ASC");
        foreach(var row in data)
        {
            voorlichtingen.Add(new Voorlichting(row.VoorlichtingId, row.VakId, row.UserId, row.LokaalId, row.DateTime, row.Niveau));
        }
        db.Close();
        return voorlichtingen;
    }

    // geeft een voorlichting terug die de gegeven id matcht
    public static Voorlichting GetVoorlichting(int id)
    {
        var db = Database.Open(App.DataBase);
        var data = db.QuerySingle("SELECT * FROM Voorlichting WHERE VoorlichtingId = @0 ORDER BY DateTime ASC", id);
        if(data != null)
        {
            Voorlichting voorlichting = new Voorlichting(id, data.VakId, data.UserId, data.LokaalId, data.DateTime, data.Niveau);
            db.Close();
            return voorlichting;
        }
        db.Close();
        return null;
    }

    // geeft alle voorlichtingen terug van een leerling die de gegeven userId matcht
    public static List<Voorlichting> GetStudentRooster(int userId)
    {
        List<Voorlichting> voorlichtingen = new List<Voorlichting>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Rooster INNER JOIN Voorlichting ON Rooster.VoorlichtingId = Voorlichting.VoorlichtingId WHERE Rooster.UserId = @0 ORDER BY DateTime ASC", userId);
        foreach (var row in data)
        {
            voorlichtingen.Add(new Voorlichting(row.VoorlichtingId, row.VakId, row.UserId, row.LokaalId, row.DateTime, row.Niveau));
        }
        db.Close();
        return voorlichtingen;
    }

    // geeft alle voorlichtingen terug van een leraar die de gegeven userId matcht
    public static List<Voorlichting> GetLeraarRooster(int userId)
    {
        List<Voorlichting> voorlichtingen = new List<Voorlichting>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Voorlichting WHERE UserId = @0 ORDER BY DateTime ASC", userId);
        foreach (var row in data)
        {
            voorlichtingen.Add(new Voorlichting(row.VoorlichtingId, row.VakId, row.UserId, row.LokaalId, row.DateTime, row.Niveau));
        }
        db.Close();
        return voorlichtingen;
    }

    // voegt een voorlichting toe aan de database met alle gegeven argumenten
    public static void MakeVoorlichting(int vakId, int userId, int lokaalId, DateTime dateTime, string niveau)
    {
        var db = Database.Open(App.DataBase);
        var insertCommand = "INSERT INTO Voorlichting (VakId, UserId, LokaalId, DateTime, Niveau) VALUES(@0,@1,@2,@3,@4)";
        db.Execute(insertCommand, vakId, userId, lokaalId, dateTime, niveau);
        db.Close();
    }

    // delete een vorlichting en alle children (rooster) uit de database die de gegeven id  matcht
    public static void DeleteVoorlichting(int id)
    {
        var db = Database.Open(App.DataBase);
        var deleteCommand = "DELETE FROM Voorlichting WHERE VoorlichtingId = @0";
        var deleteRoosterCommand = "DELETE FROM Rooster WHERE VoorlichtingId = @0";
        db.Execute(deleteCommand, id);
        db.Execute(deleteRoosterCommand, id);
        db.Close();
    }
}
