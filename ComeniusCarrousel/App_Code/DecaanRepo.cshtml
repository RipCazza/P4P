@functions{
    // Geeft een lijst terug met alle decanen waar decanen[i].item1 = userId en decanen[i].item2 = userName
    public static List<Tuple<int, string>> GetDecanen()
    {
        List<Tuple<int, string>> decanen = new List<Tuple<int, string>>{};
        var db = Database.Open("authenticationData");
        var data = db.Query("SELECT UserProfile.UserId, UserName FROM UserProfile INNER JOIN webpages_UsersInRoles ON UserProfile.UserId=webpages_UsersInRoles.UserId WHERE RoleId = 2 ORDER BY UserName ASC");
        foreach (var row in data)
        {
            decanen.Add(new Tuple<int, string> (row.UserId, row.UserName));
        }
        db.Close();
        return decanen;
    }

    // Geeft een decaan die de gegeven id matcht waar decaan.item1 = userId en decaan.item2 = userName
    public static Tuple<int, string> GetDecaan(int id)
    {
        Tuple<int, string> decaan;
        var db = Database.Open("authenticationData");
        var data = db.QuerySingle("SELECT UserProfile.UserId, UserName FROM UserProfile INNER JOIN webpages_UsersInRoles ON UserProfile.UserId = webpages_UsersInRoles.UserId WHERE RoleId = 2 AND UserProfile.UserId = @0", id);
        if(data != null)
        {
            decaan = new Tuple<int, string> (data.UserId, data.UserName);
            db.Close();
            return decaan;
        }
        else
        {
            db.Close();
            return null;
        }
    }

    // delete een decaan uit de database met een bepaalde userId en userName
    public static void DeleteDecaan(int id, string user)
    {
        var userDb = Database.Open(App.AuthDataBase);
        var userRoles = Roles.GetRolesForUser(user);
        if (userRoles.Count() > 0)
        {
            Roles.RemoveUserFromRoles(user, userRoles); // deletes records from webpages_UsersInRoles table
        }
        ((SimpleMembershipProvider)Membership.Provider).DeleteAccount(user); // deletes record from webpages_Membership table
        ((SimpleMembershipProvider)Membership.Provider).DeleteUser(user, true); // deletes record from UserProfile table
        userDb.Close();
    }

    // maakt een decaan aan in de database met een bepaalde userName en password
    public static void MakeDecaan(string userName, string password)
    {
        var db = Database.Open(App.AuthDataBase);

            var user = db.QuerySingle("SELECT UserName FROM UserProfile WHERE LOWER(UserName) = LOWER(@0)", userName);
            if(user == null)
            {
                db.Execute("INSERT INTO UserProfile (UserName) VALUES (LOWER(@0))", userName);

                try
                {
                    var token = WebSecurity.CreateAccount(userName, password, false);
                    Roles.AddUserToRole(userName, "Decaan");
                    db.Close();
                    Response.Redirect("~/Admin/Decaan/DecaanOverzicht");
                }
                catch(System.Web.Security.MembershipCreateUserException e)
                {
                    db.Close();
                    ModelState.AddFormError(e.Message);
                }
            }
            else
            {
                ModelState.AddFormError("Gebruiker bestaat al");
            }
            db.Close();
    }
}
