@functions{
    // class representatie van de database tabel Leerling. Inherit van Gebruiker
    public class Leerling : GebruikerRepo.Gebruiker
    {
        private const string table = "Leerling";
        private const string idName = "UserId";

        private int klasId;
        private string niveau;
        private int leerlingnummer;
        private bool instroomLeerling;
        private string mailVerzorger;
        private string talentstroomVak;
        private bool aangemeld;

        public Leerling(int userId, string userName, string voornaam, string achternaam,
            int klasId, string niveau, int leerlingnummer, bool instroomLeerling, string mailVerzorger, string talentsroomVak, bool aangemeld) : base(userId, userName, voornaam, achternaam)
        {
            this.klasId = klasId;
            this.niveau = niveau;
            this.leerlingnummer = leerlingnummer;
            this.instroomLeerling = instroomLeerling;
            this.mailVerzorger = mailVerzorger;
            this.talentstroomVak = talentsroomVak;
            this.aangemeld = aangemeld;
        }

        // // Geeft de keuzeVakken behorend aan de leerling waar keuzeVakken[i].item1 = vakNaam en keuzeVakken[i].item2 = vakId
        public List<Tuple<string, int>> KeuzeVakken()
        {
            List<Tuple<string, int>> keuzeVakken = new List<Tuple<string, int>>();
            var db = Database.Open(App.DataBase);
            var data = db.Query("SELECT VakNaam, Keuze.VakId FROM Vak INNER JOIN Keuze ON Vak.VakId = Keuze.VakId Where Keuze.UserId = @0", userId);
            foreach(var row in data)
            {
                keuzeVakken.Add(new Tuple<string, int> (row.VakNaam, row.VakId));
            }
            return keuzeVakken;
        }

        // geeft de klasNaam bijbehorend aan de klasId van de leerling
        public string Klas
        {
            get
            {
                var db = Database.Open(App.DataBase);
                var data = db.QuerySingle("SELECT KlasNaam FROM Leerling INNER JOIN Klas ON Klas.KlasId = Leerling.KlasId WHERE UserId = @0", userId);
                if(data != null)
                {
                    db.Close();
                    return data.KlasNaam;
                }
                db.Close();
                return null;
            }
        }

        public int KlasId
        {
            get{return klasId;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "KlasId", Convert.ToString(value), idName, userId);
            }
        }
        public string Niveau
        {
            get{return niveau;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Niveau", value, idName, userId);
            }
        }
        public int Leerlingnummer
        {
            get{return leerlingnummer;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Leerlingnummer", Convert.ToString(value), idName, userId);
            }
        }
        public bool InstroomLeerling
        {
            get{return InstroomLeerling;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "InstroomLeerling", Convert.ToString(value), idName, userId);
            }
        }
        public string MailVerzorger
        {
            get{return mailVerzorger;} 
            set{
                var db = Database.Open(App.DataBase);
                var updateCommand = "UPDATE Leerling SET MailVerzorger = LOWER(@0) where UserId = @1";
                db.Execute(updateCommand, value, userId);
                db.Close();
            }
        }
        public string TalentstroomVak
        {
            get{return talentstroomVak;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "TalentstroomVak", value, idName, userId);
            }
        }
        public bool Aangemeld
        {
            get{return aangemeld;} 
            set{
                var db = Database.Open(App.DataBase);
                var updateCommand = "UPDATE Leerling SET aangemeld = @0 where UserId = @1";
                db.Execute(updateCommand, Convert.ToString(value), userId);
                db.Close();
            }
        }
    }

    // geeft een leerling terug die de gegeven id matcht
    public static Leerling GetLeerling(int id)
    {
        var db = Database.Open(App.DataBase);
        var data = db.QuerySingle("SELECT * FROM Gebruiker WHERE UserId = @0", id);
        var leerlingData = db.QuerySingle("SELECT * FROM Leerling WHERE UserId = @0", id);
        var userDb = Database.Open(App.AuthDataBase);
        var userData = userDb.QuerySingle("SELECT UserName FROM UserProfile WHERE UserId = @0", id);
        if(data != null && userData != null)
        {
            Leerling leerling = new Leerling(id, userData.UserName, data.Voornaam, data.Achternaam,
                leerlingData.KlasId, leerlingData.Niveau, leerlingData.Leerlingnummer, leerlingData.InstroomLeerling,
                leerlingData.MailVerzorger, leerlingData.TalentstroomVak, leerlingData.Aangemeld);
            db.Close();
            userDb.Close();
            return leerling;
        }
        db.Close();
        userDb.Close();
        return null;
    }

    // Geeft een lijst terug met alle leerlingen (wanneer een van de optionele argumenten ingevuld wordt geeft het alleen de
    // leerlingen waar de bijbehorende waarde uit Keuze(vakId)/Rooster(voorlichtingId) matcht met de gegeven waarde)
    public static List<Leerling> GetLeerlingen(int vakId = -1, int voorlichtingId = -1)
    {
        List<Leerling> leerlingen = new List<Leerling>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Gebruiker Gebr INNER JOIN Leerling Leerl ON Gebr.UserId = Leerl.UserId");
        if (voorlichtingId != -1)
        {
            data = db.Query("SELECT * FROM Gebruiker Gebr INNER JOIN Leerling Leerl ON Gebr.UserId = Leerl.UserId INNER JOIN Rooster Roos ON Gebr.UserId = Roos.UserId WHERE Roos.VoorlichtingId = @0", voorlichtingId);
        }
        else if (vakId != -1)
        {
            data = db.Query("SELECT * FROM Gebruiker Gebr INNER JOIN Leerling Leerl ON Gebr.UserId = Leerl.UserId INNER JOIN Keuze Keuz ON Gebr.UserId = Keuz.UserId WHERE Keuz.VakId = @0", vakId);
        }
        if(data != null)
        {
            var authDb = Database.Open(App.AuthDataBase);
            foreach (var row in data)
            {
                var mailData = authDb.QuerySingle("SELECT UserName FROM UserProfile WHERE UserId = @0", row.UserId);
                leerlingen.Add(new Leerling(row.UserId,  mailData.UserName, row.Voornaam, row.Achternaam,
                    row.KlasId, row.Niveau, row.Leerlingnummer, row.InstroomLeerling,
                    row.MailVerzorger, row.TalentstroomVak, row.Aangemeld));
            }
            db.Close();
            return leerlingen;
        }
        db.Close();
        return null;
    }

    // delete een leerling en alle children (mailOntvanger, keuze, rooster) uit de database die de gegeven userId en userName matcht
    public static void DeleteLeerlingen(int userId, string user)
    {
        var db = Database.Open(App.DataBase);
        var userDb = Database.Open(App.AuthDataBase);
        var deleteLeerlingCommand = "DELETE FROM Leerling WHERE UserId = @0";
        var deleteGebruikerCommand = "DELETE FROM Gebruiker WHERE UserId = @0";
        var deleteMailOntvangerCommand = "DELETE FROM Gebruiker WHERE UserId = @0";
        var deleteKeuzeCommand = "DELETE FROM Keuze WHERE UserId = @0";
        var deleteRoosterCommand = "DELETE FROM Rooster WHERE UserId = @0";
        db.Execute(deleteLeerlingCommand, userId);
        db.Execute(deleteGebruikerCommand, userId);
        db.Execute(deleteMailOntvangerCommand, userId);
        db.Execute(deleteKeuzeCommand, userId);
        db.Execute(deleteRoosterCommand, userId);
        var userRoles = Roles.GetRolesForUser(user);
        if (userRoles.Count() > 0)
        {
            Roles.RemoveUserFromRoles(user, userRoles); // deletes records from webpages_UsersInRoles table
        }
        ((SimpleMembershipProvider)Membership.Provider).DeleteAccount(user); // deletes record from webpages_Membership table
        ((SimpleMembershipProvider)Membership.Provider).DeleteUser(user, true); // deletes record from UserProfile table
        db.Close();
        userDb.Close();
    }

    // voegt een leerling toe aan de database met alle gegeven argumenten (optioneel argument i verandert alleen de error message wanneer deze wordt ingevuld)
    public static void MakeLeerling(string mail, string wachtwoord, string voornaam, string achternaam, int klasId, string niveau, int leerlingnummer, string instroomleerling, string vak, int i = -1)
    {
        var db = Database.Open(App.AuthDataBase);
        var db2 = Database.Open(App.DataBase);
        var user = db.QuerySingle("SELECT UserName FROM UserProfile WHERE LOWER(UserName) = LOWER(@0)", mail);
        if(user == null)
        {
            db.Execute("INSERT INTO UserProfile (UserName) VALUES (LOWER(@0))", mail);
                
            try
            {
                var token = WebSecurity.CreateAccount(mail, wachtwoord, false);
                var dataId = db.QuerySingle("SELECT UserId FROM UserProfile WHERE LOWER(UserName) = LOWER(@0)", mail);
                db2.Execute("INSERT INTO Gebruiker (Voornaam, Achternaam, UserId) VALUES (@0,@1,@2)",voornaam, achternaam, dataId.UserId);
                db2.Execute("INSERT INTO Leerling (UserId, KlasId, Niveau, Leerlingnummer, InstroomLeerling, TalentstroomVak, Aangemeld ) VALUES (@0,@1,@2,@3,@4,@5,@6)",dataId.UserId, klasId, niveau.ToUpper(), leerlingnummer, instroomleerling, vak, "False");
                Roles.AddUserToRole(mail, "Leerling");
                if (niveau.ToLower() == "vwo")
                {
                    List<VakRepo.Vak> vakken = VakRepo.GetVakken(niveau, vak);
                    foreach (VakRepo.Vak keuzeVak in vakken)
                    {
                        KeuzeRepo.InsertKeuze(dataId.UserId, keuzeVak.VakId, 1);
                    }
                }
                db.Close();
                db2.Close();
            }
            catch(System.Web.Security.MembershipCreateUserException e)
            {
                db.Close();
                db2.Close();
                ModelState.AddFormError(e.Message);
            }
        }
        else if(i != -1)
        {
            ModelState.AddFormError("Gebruiker " + (i+1) + " bestaat al");
        }
        else
        {
            ModelState.AddFormError("Gebruiker bestaat al");
        }
        db.Close();
        db2.Close();
    }
}