@functions{
    public class Leerling : GebruikerRepo.Gebruiker
    {
        private const string table = "Leerling";
        private const string idName = "UserId";

        private string klas;
        private string niveau;
        private int leerlingnummer;
        private bool instroomLeerling;
        private string mailVerzorger;
        private string talentstroomVak;
        private bool aangemeld;

        public Leerling(int userId, string userName, string voornaam, string achternaam,
            string klas, string niveau, int leerlingnummer, bool instroomLeerling, string mailVerzorger, string talentsroomVak, bool aangemeld) : base(userId, userName, voornaam, achternaam)
        {
            this.klas = klas;
            this.niveau = niveau;
            this.leerlingnummer = leerlingnummer;
            this.instroomLeerling = instroomLeerling;
            this.mailVerzorger = mailVerzorger;
            this.talentstroomVak = talentsroomVak;
            this.aangemeld = aangemeld;
        }

        

        public List<Tuple<string, int>> KeuzeVakken()
        {
            List<Tuple<string, int>> keuzeVakken = new List<Tuple<string, int>>();
            var db = Database.Open(App.DataBase);
            var data = db.Query("SELECT VakNaam, Keuze.VakId FROM Vak INNER JOIN Keuze ON Vak.VakId = Keuze.VakId Where Keuze.UserId = @0", userId);
            foreach(var row in data)
            {
                keuzeVakken.Add(new Tuple<string, int> (row.VakNaam, row.VakId));
            }
            return keuzeVakken;
        }

        public string Klas
        {
            get{return klas;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Klas", value, idName, userId);
            }
        }
        public string Niveau
        {
            get{return niveau;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Niveau", value, idName, userId);
            }
        }
        public int Leerlingnummer
        {
            get{return leerlingnummer;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Leerlingnummer", Convert.ToString(value), idName, userId);
            }
        }
        public bool InstroomLeerling
        {
            get{return InstroomLeerling;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "InstroomLeerling", Convert.ToString(value), idName, userId);
            }
        }
        public string MailVerzorger
        {
            get{return mailVerzorger;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "MailVerzorger", value, idName, userId);
            }
        }
        public string TalentstroomVak
        {
            get{return talentstroomVak;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "TalentstroomVak", value, idName, userId);
            }
        }
        public bool Aangemeld
        {
            get{return aangemeld;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Aangemeld", Convert.ToString(value), idName, userId);
            }
        }
    }

    public static Leerling GetLeerling(int id)
    {
        var db = Database.Open(App.DataBase);
        var data = db.QuerySingle("SELECT * FROM Gebruiker WHERE UserId = @0", id);
        var leerlingData = db.QuerySingle("SELECT * FROM Leerling WHERE UserId = @0", id);
        var userDb = Database.Open(App.AuthDataBase);
        var userData = userDb.QuerySingle("SELECT UserName FROM UserProfile WHERE UserId = @0", id);
        if(data != null && userData != null)
        {
            Leerling leerling = new Leerling(id, userData.UserName, data.Voornaam, data.Achternaam,
                leerlingData.Klas, leerlingData.Niveau, leerlingData.Leerlingnummer, leerlingData.InstroomLeerling,
                leerlingData.MailVerzorger, leerlingData.TalentstroomVak, leerlingData.Aangemeld);
            db.Close();
            userDb.Close();
            return leerling;
        }
        db.Close();
        userDb.Close();
        return null;
    }

    public static List<Leerling> GetLeerlingen()
    {
        List<Leerling> leerlingen = new List<Leerling>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Gebruiker Gebr INNER JOIN Leerling Leerl ON Gebr.UserId = Leerl.UserId");
        if(data != null)
        {
            foreach (var row in data)
            {
                leerlingen.Add(new Leerling(row.UserId,  null, row.Voornaam, row.Achternaam,
                    row.Klas, row.Niveau, row.Leerlingnummer, row.InstroomLeerling,
                    row.MailVerzorger, row.TalentstroomVak, row.Aangemeld));
            }
            db.Close();
            return leerlingen;
        }
        db.Close();
        return null;
    }
    /*public static void UpdateAangemeld(string aangemeld, int id)
    {
        var db = Database.Open(App.DataBase);
        var updateCommand = "UPDATE Leerling SET aangemeld = @0 where UserId = @1";
        db.Execute(updateCommand, aangemeld, id);
        db.Close();
    }

    public static void UpdateMailVerzorger(string mailVerzorger, int id)
    {
        var db = Database.Open(App.DataBase);
        var updateCommand = "UPDATE Leerling SET LCASE(MailVerzorger) = @0 where UserId = @1";
        db.Execute(updateCommand, mailVerzorger, id);
        db.Close();
    }*/
}