@functions{
    // class representatie van de database tabel Leraar. Inherit van Gebruiker
    public class Leraar : GebruikerRepo.Gebruiker
    {
        private const string table = "Leraar";
        private const string idName = "UserId";

        private string voorlichtingVak;

        public Leraar(int userId, string userName, string voornaam, string achternaam,
            string voorlichtingVak) : base(userId, userName, voornaam, achternaam)
        {
            this.voorlichtingVak = voorlichtingVak;
        }

        public string VoorlichtingVak
        {
            get{return voorlichtingVak;} 
            set{
                Repository.CRUD.doSimpleIdUpdate(table, "Leraar", value, idName, userId);
            }
        }
    }

    // geeft een leerling terug die de gegeven id matcht
    public static Leraar GetLeraar(int id)
    {
        var db = Database.Open(App.DataBase);
        var data = db.QuerySingle("SELECT * FROM Gebruiker WHERE UserId = @0", id);
        var leraarData = db.QuerySingle("SELECT * FROM Leraar WHERE UserId = @0", id);
        var userDb = Database.Open(App.AuthDataBase);
        var userData = userDb.QuerySingle("SELECT UserName FROM UserProfile WHERE UserId = @0", id);
        if(data != null && userData != null)
        {
            Leraar leraar = new Leraar(id, userData.UserName, data.Voornaam, data.Achternaam,
                leraarData.VoorlichtingVak);
            db.Close();
            userDb.Close();
            return leraar;
        }
        db.Close();
        userDb.Close();
        return null;
    }

    // Geeft een lijst terug met alle decanen
    public static List<Leraar> GetLeraren()
    {
        List<Leraar> leraren = new List<Leraar>();
        var db = Database.Open(App.DataBase);
        var data = db.Query("SELECT * FROM Gebruiker Gebr INNER JOIN Leraar Lera ON Gebr.UserId = Lera.UserId");
        if(data != null)
        {
            foreach (var row in data)
            {
                leraren.Add(new Leraar(row.UserId,  null, row.Voornaam, row.Achternaam,
                    row.VoorlichtingVak));
            }
            db.Close();
            return leraren;
        }
        db.Close();
        return null;
    }

    // delete een leraar en alle children (mailOntvanger, voorlichting) uit de database die de gegeven userId en userName matcht
    public static void DeleteLeraar(int id, string user)
    {
        var db = Database.Open(App.DataBase);
        var userDb = Database.Open(App.AuthDataBase);
        var deleteCommand = "DELETE FROM Gebruiker WHERE UserId = @0";
        var deleteLeraar = "DELETE FROM Leraar WHERE UserId = @0";
        var deleteMailontvanger = "DELETE FROM MailOntvanger WHERE UserId = @0";
        db.Execute(deleteCommand, id);
        db.Execute(deleteLeraar, id);
        db.Execute(deleteMailontvanger);
        var data = db.Query("SELECT * FROM Voorlichting Voor INNER JOIN Leraar Lera ON Voor.UserId = Lera.UserId");
        foreach(var row in data)
        {
            VoorlichtingRepo.DeleteVoorlichting(row.VoorlichtingId);
        }
        var userRoles = Roles.GetRolesForUser(user);
        if (userRoles.Count() > 0)
        {
            Roles.RemoveUserFromRoles(user, userRoles); // deletes records from webpages_UsersInRoles table
        }
        ((SimpleMembershipProvider)Membership.Provider).DeleteAccount(user); // deletes record from webpages_Membership table
        ((SimpleMembershipProvider)Membership.Provider).DeleteUser(user, true); // deletes record from UserProfile table
        db.Close();
        userDb.Close();
    }

    // voegt een leraar toe aan de database met alle gegeven argumenten
    public static void MakeLeraar(string userName, string password, string voornaam, string achternaam, string vak)
    {
        var db = Database.Open(App.AuthDataBase);
            var db2 = Database.Open(App.DataBase);
            var user = db.QuerySingle("SELECT UserName FROM UserProfile WHERE LOWER(UserName) = LOWER(@0)", userName);
            if(user == null)
            {
                db.Execute("INSERT INTO UserProfile (UserName) VALUES (LOWER(@0))", userName);
                
                try
                {
                    var token = WebSecurity.CreateAccount(userName, password, false);
                    var dataId = db.QuerySingle("SELECT UserId FROM UserProfile WHERE LOWER(UserName) = LOWER(@0)", userName);
                    db2.Execute("INSERT INTO Gebruiker (Voornaam, Achternaam, UserId) VALUES (@0,@1,@2)",voornaam, achternaam, dataId.UserId);
                    db2.Execute("INSERT INTO Leraar (VoorlichtingVak, UserId) VALUES (@0,@1)", vak, dataId.UserId);
                    Roles.AddUserToRole(userName, "Leraar");
                    db.Close();
                    db2.Close();
                    Response.Redirect("~/Decaan/Leraar/LeraarOverzicht");
                }
                catch(System.Web.Security.MembershipCreateUserException e)
                {
                    db.Close();
                    db2.Close();
                    ModelState.AddFormError(e.Message);
                }
            }
            else
            {
                ModelState.AddFormError("Gebruiker bestaat al");
            }
            db.Close();
            db2.Close();
    }
}